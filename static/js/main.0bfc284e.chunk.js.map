{"version":3,"sources":["components/Weather.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["minmaxTemperature","min","max","className","Weather","city","celsius","country","temp_min","temp_max","icon","description","Form","loadWeatherInfo","error","onSubmit","role","type","placeholder","name","autoComplete","App","getCelsius","temperature","Math","floor","getWeatherIcon","icons","id","setState","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getWeather","e","a","preventDefault","target","elements","value","fetch","then","propp","json","apiCall","console","log","sys","main","temp","weather","isError","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sRAkCOA,G,kBAAoB,SAACC,EAAIC,GAC3B,GAAGD,GAAOC,EACN,OACW,4BACI,yDACC,0BAAMC,UAAU,QAAQF,EAAxB,SACA,0BAAME,UAAU,QAAQD,EAAxB,YAMVE,EA5CC,SAAC,GAON,IAPOC,EAOR,EAPQA,KAEdC,GAKM,EANNC,QAMM,EALND,SACAE,EAIM,EAJNA,SACAC,EAGM,EAHNA,SACAC,EAEM,EAFNA,KACAC,EACM,EADNA,YAEA,OACI,kBAAC,WAAD,KACQ,yBAAKR,UAAU,aACX,yBAAKA,UAAU,SACX,gCAAME,EAAN,KACA,wBAAIF,UAAU,QACV,uBAAGA,UAAS,aAASO,EAAT,iBAEfJ,EACO,wBAAIH,UAAU,QAAQG,EAAtB,SACI,KAEZ,yBAAKH,UAAU,QAEPH,EAAkBQ,EAAUC,IAGpC,wBAAIN,UAAU,QAAQQ,IAf9B,SCqCDC,G,MAtCF,SAAC,GAGH,IAFPC,EAEM,EAFNA,gBACCC,EACK,EADLA,MAEG,OACI,yBAAKX,UAAU,mBACb,0BAAMY,SAAUF,GACd,6BAAMC,EAbhB,yBAAKX,UAAU,0BAA0Ba,KAAK,SAA9C,gDAayC,IAC/B,yBAAKb,UAAU,OACb,yBAAKA,UAAU,wBACb,2BACEc,KAAK,OACLd,UAAU,eACVe,YAAY,QACZC,KAAK,OACLC,aAAa,SAGjB,yBAAKjB,UAAU,YACb,2BACEc,KAAK,OACLd,UAAU,eACVe,YAAY,OACZC,KAAK,UACLC,aAAa,SAGjB,yBAAKjB,UAAU,uCACb,4BAAQA,UAAU,mBAAlB,qBCuELkB,E,kDApGb,aAAc,IAAD,8BACT,gBAwBJC,WAAa,SAACC,GAEZ,OADgBC,KAAKC,MAAMF,EAAc,MA1B9B,EA8BbG,eAAiB,SAACC,EAAOC,GACvB,QAAO,GACL,KAAKA,GAAM,KAAOA,GAAM,IAAK,EAAKC,SAAS,CAACnB,KAAM,EAAKoB,YAAYC,eACnE,MACA,KAAKH,GAAM,KAAOA,GAAM,IAAK,EAAKC,SAAS,CAACnB,KAAM,EAAKoB,YAAYE,UACnE,MACA,KAAKJ,GAAM,KAAOA,GAAM,IAAK,EAAKC,SAAS,CAACnB,KAAM,EAAKoB,YAAYG,OACnE,MACA,KAAKL,GAAM,KAAOA,GAAM,IAAK,EAAKC,SAAS,CAACnB,KAAM,EAAKoB,YAAYI,OACnE,MACA,KAAKN,GAAM,KAAOA,GAAM,IAAK,EAAKC,SAAS,CAACnB,KAAM,EAAKoB,YAAYK,aACnE,MACA,KAAY,MAAPP,EAAY,EAAKC,SAAS,CAACnB,KAAM,EAAKoB,YAAYM,QACvD,MACA,KAAKR,GAAM,KAAOA,GAAM,IAAK,EAAKC,SAAS,CAACnB,KAAM,EAAKoB,YAAYO,SACnE,MACA,QAAS,EAAKR,SAAS,CAACnB,KAAM,OA9CrB,EAkDb4B,WAlDa,uCAkDA,WAAOC,GAAP,mBAAAC,EAAA,yDACXD,EAAEE,iBACIpC,EAAOkC,EAAEG,OAAOC,SAAStC,KAAKuC,MAC9BrC,EAAUgC,EAAEG,OAAOC,SAASpC,QAAQqC,OACpCvC,IAAQE,EAJH,iCAKesC,MAAM,qDAAD,OAAsDxC,EAAtD,YAA8DE,EAA9D,kBA1DnB,qCA2DPuC,MAAK,SAASC,GACb,OAAOA,EAAMC,UAPR,OAKDC,EALC,OASLC,QAAQC,IAAIF,GACZ,EAAKpB,SAAS,CACZxB,KAAK,GAAD,OAAK4C,EAAQ9B,KAAb,cAAuB8B,EAAQG,IAAI7C,SACvCD,QAAS,EAAKgB,WAAW2B,EAAQI,KAAKC,MACtC7C,SAAU,EAAKa,WAAW2B,EAAQI,KAAK5C,UACvCD,SAAU,EAAKc,WAAW2B,EAAQI,KAAK7C,UACvCG,YAAasC,EAAQM,QAAQ,GAAG5C,cAGlC,EAAKe,eAAe,EAAKI,YAAamB,EAAQM,QAAQ,GAAG3B,IAlBpD,wBAoBP,EAAKC,SAAS,CACZ2B,SAAS,IArBJ,4CAlDA,sDAET,EAAKC,MAAQ,CACXpD,KAAM,GACNgD,KAAM,GACN3C,KAAM,GACNJ,QAAS,GACTG,SAAU,GACVD,SAAU,GACVG,YAAa,GACb6C,SAAS,GAGd,EAAK1B,YAAc,CACdC,aAAc,kBACdG,KAAM,UACND,KAAM,mBACNE,WAAY,SACZH,QAAS,WACTI,MAAO,eACPC,OAAQ,cApBD,E,qDA6EJ,IAAD,EAC4DqB,KAAKD,MAAhEpD,EADD,EACCA,KAAKC,EADN,EACMA,QAAQG,EADd,EACcA,SAASD,EADvB,EACuBA,SAASG,EADhC,EACgCA,YAAYD,EAD5C,EAC4CA,KAAK8C,EADjD,EACiDA,QAEvD,OACE,yBAAKrD,UAAU,OAEX,kBAAC,EAAD,CAAMU,gBAAiB6C,KAAKpB,WACtBxB,MAAO0C,IAGX,kBAAC,EAAD,CACEnD,KAAMA,EACNC,QAASA,EACTG,SAAUA,EACVD,SAAUA,EACVE,KAAMA,EACNC,YAAaA,S,GA9FTgD,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAA7D,GACLoC,QAAQpC,MAAMA,EAAM8D,a","file":"static/js/main.0bfc284e.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\r\n\r\nconst Weather = ({city,\r\n    country,\r\n    celsius,\r\n    temp_min, \r\n    temp_max,\r\n    icon,\r\n    description\r\n    }) => {\r\n    return (\r\n        <Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"cards\">\r\n                        <h1> {city} </h1>\r\n                        <h5 className=\"py-4\">\r\n                            <i className= {`wi ${icon} display-1`} ></i>\r\n                        </h5>\r\n                        {celsius ? (\r\n                                <h1 className=\"py-2\">{celsius}&deg;C</h1>\r\n                                ) : null\r\n                        }\r\n                        <div className=\"py-3\">\r\n                            {\r\n                                minmaxTemperature(temp_min, temp_max)\r\n                            }\r\n                        </div>\r\n                        <h4 className=\"py-3\">{description}</h4>\r\n                    </div>npm\r\n                </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n const minmaxTemperature = (min,max) => {\r\n     if(min && max) {\r\n         return(\r\n                    <h3> \r\n                        <h4> Min and Max Temperature </h4>\r\n                         <span className=\"px-4\">{min}&deg;C</span>\r\n                         <span className=\"px-4\">{max}&deg;C</span>  \r\n                    </h3>  \r\n                 );\r\n     }\r\n}\r\n\r\nexport default Weather ;","import React from 'react'\r\nimport './form.css'\r\n\r\nconst errorMessage = () => {\r\n    return (\r\n      <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n          Erreur de champs ! Informations invalides :(\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst Form = ({\r\n    loadWeatherInfo,\r\n     error\r\n    }) => {\r\n        return (\r\n            <div className=\"container h-100\">\r\n              <form onSubmit={loadWeatherInfo}>\r\n                <div>{error ? errorMessage() : \"\"}</div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-3 offset-md-2\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Ville\"\r\n                      name=\"city\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-3\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Pays\"\r\n                      name=\"country\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\r\n                    <button className=\"btn btn-warning\"> Info Meteo</button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          );\r\n}\r\n\r\n\r\n\r\nexport default Form ;","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Weather from './components/Weather';\nimport Form from './components/Form';\n\nconst API_key = \"493ae353fc1ae41fd2b138d7f904d186\";\n\nclass App extends Component{\n  constructor(){\n      super()\n      this.state = {\n        city: '',\n        main: '',\n        icon: '',\n        celsius: '',\n        temp_max: '',\n        temp_min: '',\n        description: '',\n        isError: false\n      };\n\n   this.weatherIcon = {\n        Thunderstorm: 'wi-thunderstorm',\n        Snow: 'wi-snow',\n        Rain: 'wi-storm-showers',\n        Atmosphere: 'wi-fog',\n        Drizzle: 'wi-sleet',\n        Clear: 'wi-day-sunny',\n        Clouds: 'wi-day-fog'\n      }\n\n  }\n\n  getCelsius = (temperature) => {\n    let responsee = Math.floor(temperature - 273) \n    return responsee ;\n  }\n\n  getWeatherIcon = (icons, id) => {\n    switch(true){\n      case id >= 200 && id <= 232: this.setState({icon: this.weatherIcon.Thunderstorm});\n      break;\n      case id >= 300 && id <= 321: this.setState({icon: this.weatherIcon.Drizzle});\n      break;\n      case id >= 500 && id <= 531: this.setState({icon: this.weatherIcon.Rain});\n      break;\n      case id >= 600 && id <= 622: this.setState({icon: this.weatherIcon.Snow});\n      break;\n      case id >= 700 && id <= 781: this.setState({icon: this.weatherIcon.Atmosphere});\n      break;\n      case id === 800: this.setState({icon: this.weatherIcon.Clear});\n      break;\n      case id >= 801 && id <= 804: this.setState({icon: this.weatherIcon.Clouds});\n      break;\n      default: this.setState({icon: ''});\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value, \n          country = e.target.elements.country.value ;\n      if( city && country) {\n        const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\n        .then(function(propp) {\n          return propp.json()}\n          )\n          console.log(apiCall);\n          this.setState({\n            city: `${apiCall.name} , ${apiCall.sys.country}`,\n            celsius: this.getCelsius(apiCall.main.temp),\n            temp_max: this.getCelsius(apiCall.main.temp_max),\n            temp_min: this.getCelsius(apiCall.main.temp_min),\n            description: apiCall.weather[0].description\n          })\n    \n          this.getWeatherIcon(this.weatherIcon, apiCall.weather[0].id);\n      } else {\n        this.setState({\n          isError: true \n        })\n      }\n\n    }\n\n  render(){\n    const {city,celsius,temp_max,temp_min,description,icon,isError} = this.state ;\n    \n    return (\n      <div className=\"App\">\n\n          <Form loadWeatherInfo={this.getWeather}\n                error={isError}\n           />\n\n            <Weather \n              city={city} \n              celsius={celsius}\n              temp_max={temp_max}\n              temp_min={temp_min}\n              icon={icon}\n              description={description}\n            />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}